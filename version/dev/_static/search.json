[{"objectID":"Home","href":"index.html#ansys-scade-test-harness-generator-for-python","title":"Ansys SCADE Test Harness Generator for Python","text":"Ansys SCADE Test Harness Generator for Python\n\nAnsys SCADE Test Harness Generator (THG) for Python generates Python test\nscripts from SCADE Tests projects. These Python tests target the Python proxies\nproduced by Ansys SCADE Python Wrapper\n\nRefer to the chapter Preparing Test Execution on Target in the document\nSCADE Test User Manual for a complete reference. In particular the following section:\nDeclaring Custom Target\n\n Getting started\n\nLearn how to install and use Ansys SCADE THG for Python.\n\ngetting-started/index\n\n User guide\n\nLearn how to use Ansys SCADE THG for Python.\n\nuser-guide/index\n\n Contributing\n\nLearn how to contribute to Ansys SCADE THG for Python.\n\ncontributing\n\n Changelog\n\nView the changelog for Ansys SCADE THG for Python.\n\nchangelog\n\n"},{"objectID":"Home","href":"index.html#indices-and-tables","title":"Ansys SCADE Test Harness Generator for Python > Indices and tables","text":"Indices and tables\n\ngenindex\n\nsearch"},{"objectID":"Home","href":"user-guide/index.html#user-guide","title":"User guide","text":"User guide\n\n"},{"objectID":"Contribute","href":"contributing.html#contribute","title":"Contribute","text":"Contribute\n\nOverall guidance on contributing to a PyAnsys library appears in\nContributing\nin the PyAnsys developer’s guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to Ansys SCADE THG for Python.\n\nThe following contribution information is specific to Ansys SCADE THG for Python."},{"objectID":"Contribute","href":"contributing.html#install-in-developer-mode","title":"Contribute > Install in developer mode","text":"Install in developer mode\n\nInstalling Ansys SCADE THG for Python in developer mode allows you to modify the\nsource and enhance it.\n\nClone the ansys-scade-pyhg repository:\n\nAccess the scade-pyhg directory where the repository has been cloned:\n\nCreate a clean Python 3.10 environment and activate it:\n\nYou should use the interpreter delivered with Ansys SCADE. For example,\nC:\\Program Files\\ANSYS Inc\\v241\\SCADE\\contrib\\Python310\\python.exe.\n\nMake sure that you have the latest required build system, documentation, testing,\nand CI tools:\n\nInstall the project in editable mode:\n\nUse tox to verify your development installation:"},{"objectID":"Contribute","href":"contributing.html#unit-test","title":"Contribute > Unit test","text":"Unit test\n\nAnsys SCADE THG for Python uses tox for testing. This tool allows you to\nautomate common development tasks (similar to Makefile), but it is oriented\ntowards Python development."},{"objectID":"Contribute","href":"contributing.html#use-tox","title":"Contribute > Use tox","text":"Use tox\n\nWhile Makefile has rules, tox has environments. In fact, tox creates its\nown virtual environment so that anything being tested is isolated from the project\nto guarantee the project’s integrity.\n\nThe following tox commands are provided:\n\ntox -e style: Checks for coding style quality.\n\ntox -e tests: Checks for unit tests.\n\ntox -e tests-coverage: Checks for unit testing and code coverage\n\ntox -e doc: Checks for the documentation-building process.\n\ntox -e doc-html: Builds the HTML documentation.\n\ntox -e doc-links: Checks for broken links in the documentation."},{"objectID":"Contribute","href":"contributing.html#use-raw-testing","title":"Contribute > Use raw testing","text":"Use raw testing\n\nIf required, from the command line, you can call style commands like\nruff. You can also call unit testing commands like pytest.\nHowever, running these commands does not guarantee that your project is being tested in an\nisolated environment, which is the reason why tools like tox exist."},{"objectID":"Contribute","href":"contributing.html#use-pre-commit","title":"Contribute > Use pre-commit","text":"Use pre-commit\n\nAnsys SCADE THG for Python follows the PEP8 standard as outlined in\nPEP 8 in\nthe PyAnsys developer’s guide and implements style checking using\npre-commit.\n\nTo ensure your code meets minimum code styling standards, run these commands:\n\nYou can also install this as a pre-commit hook by running this command:\n\nThis way, it’s not possible for you to push code that fails the style checks:"},{"objectID":"Contribute","href":"contributing.html#build-documentation","title":"Contribute > Build documentation","text":"Build documentation\n\nFor building documentation, you can run the usual rules provided in the\nSphinx make file. Here are some examples:\n\nHowever, the recommended way of checking documentation integrity is to use\ntox:"},{"objectID":"Contribute","href":"contributing.html#debug-and-integration-test","title":"Contribute > Debug and integration test","text":"Debug and integration test\n\nAnsys SCADE Test Harness Generator needs to be registered to SCADE for\nintegration testing. Indeed, it is called by SCADE Test Harness Generation."},{"objectID":"Contribute","href":"contributing.html#install-in-user-mode","title":"Contribute > Install in user mode","text":"Install in user mode\n\nIt is not possible to reuse the virtual environment setup for the repository.\nYou must install the package in an environment accessible by SCADE, for\nexample its own Python distribution, although this is not advised,\nor the Python 3.10 user distribution:\n\nYou can reuse any <install>\\SCADE\\contrib\\Python310\\python.exe\nor Python 3.10 installation on your computer."},{"objectID":"Contribute","href":"contributing.html#debug","title":"Contribute > Debug","text":"Debug\n\nThe .\\tests\\Debug\\debug.py script uses internal SCADE Test Harness Generation\nentry points to start a debug session for the scripts.\n\nYou must use the Python 3.10 environment delivered with SCADE, located in\n<install>\\contrib\\Python310.\n\nFor example:\nC:\\Program Files\\ANSYS Inc\\v251\\SCADE\\contrib\\Python310.\n\nConfigure PYTHONPATH to refer to <install>\\SCADE\\bin and\n<install>\\SCADE\\APIs\\Python\\lib. For example:\n\nRefer to .\\tests\\Debug\\debug.py for its command line parameters."},{"objectID":"Contribute","href":"contributing.html#run-the-integration-tests","title":"Contribute > Run the integration tests","text":"Run the integration tests\n\nThese are manual tests. Refer to the test procedures, contained in each test\ndirectory as readme files."},{"objectID":"Contribute","href":"contributing.html#uninstall","title":"Contribute > Uninstall","text":"Uninstall\n\nOnce the test or debug sessions are completed, you may uninstall the package\nas follows:"},{"objectID":"Contribute","href":"contributing.html#distribute","title":"Contribute > Distribute","text":"Distribute\n\nIf you would like to create either source or wheel files, start by installing\nthe building requirements and then executing the build module:"},{"objectID":"Contribute","href":"contributing.html#post-issues","title":"Contribute > Post issues","text":"Post issues\n\nUse the Ansys SCADE THG for Python Issues\npage to submit questions, report bugs, and request new features. When possible, use\nthese templates:\n\nBug, problem, error: For filing a bug report\n\nDocumentation error: For requesting modifications to the documentation\n\nAdding an example: For proposing a new example\n\nNew feature: For requesting enhancements to the code\n\nIf your issue does not fit into one of these template categories, click\nthe link for opening a blank issue.\n\nTo reach the project support team, email pyansys.core@ansys.com.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"getting-started/index.html#getting-started","title":"Getting started","text":"Getting started\n\nTo use Ansys SCADE THG for Python, you must have a valid license for Ansys SCADE.\n\nFor information on getting a licensed copy, see the\nAnsys SCADE Suite\npage on the Ansys website."},{"objectID":"Home","href":"getting-started/index.html#requirements","title":"Getting started > Requirements","text":"Requirements\n\nThe ansys-scade-pyhg package supports only the versions of Python delivered with\nAnsys SCADE, starting from 2024 R2:\n\n2024 R2 and later: Python 3.10"},{"objectID":"Home","href":"getting-started/index.html#install-in-user-mode","title":"Getting started > Install in user mode","text":"Install in user mode\n\nThe following steps are for installing Ansys SCADE THG for Python in user mode. If you want to\ncontribute to Ansys SCADE THG for Python, see contribute_scade_pyhg for the steps\nfor installing in developer mode.\n\nBefore installing Ansys SCADE THG for Python in user mode, run this command to ensure that\nyou have the latest version of pip:\n\nInstall Ansys SCADE THG for Python with this command:\n\nFor Ansys SCADE 2024 R2, complete the installation by copying\nansys/scade/pyhg/lib/qtethgpyhg66.py to the SCADE/scripts/Thg directory\nof the SCADE 2024 R2 installation.\n\nFor example: C:\\Program Files\\ANSYS Inc\\v242\\SCADE\\SCADE\\scripts\\Thg.\n\nCreate the directory Thg if it does not exist.\n\n"},{"objectID":"Home","href":"user-guide/thg.html#test-harness-generation","title":"Test harness generation","text":"Test harness generation"},{"objectID":"Home","href":"user-guide/thg.html#settings","title":"Test harness generation > Settings","text":"Settings\n\nSelect the extension Python Target Test Environment in SCADE Test Settings,\nHarness Generation tab.\n\nThe settings page Python Target Test Environment is visible when the target\nis selected:\n\nModule name (default name of the SCADE Suite model): Name of the Python proxy\nfor the tested root operators.\n\nRuntime class (default ansys.scade.pyhg.lib.thgrt.Thgrt): Class used by\nthe generated scripts to assess the checks. The default class is delivered as\nan example, you can provide your own runtime, for example by deriving a new\nclass from the default one."},{"objectID":"Home","href":"user-guide/thg.html#generation","title":"Test harness generation > Generation","text":"Generation\n\nThe tool generates one Python script per test record, named\n<procedure>_<record>.py."},{"objectID":"Home","href":"user-guide/limitations.html#known-limitations","title":"Known limitations","text":"Known limitations\n\nThe name of the structuring folders are not considered to define the name of\nthe Python scripts. Two different records of a procedure with the same name\nlead to the same target file.\n\nThe probes are not considered.\n\nThe parameter filter of the on_check callback is ignored."},{"objectID":"Home","href":"user-guide/runtime.html#runtime","title":"Runtime","text":"Runtime\n\nThe generated scenarios require a runtime for assessing the checks.\nIndeed, this requires an internal state, at least for caching properties like\ntolerances, aliases, or most importantly, the sustainability of the checks.\nOtherwise, the python script would become too verbose.\n\nIt is possible to tune the messages, execution reports, etc., by specifying\nyour own runtime class."},{"objectID":"Release notes","href":"changelog.html#release-notes","title":"Release notes","text":"Release notes\n\nThis document contains the release notes for the project."},{"objectID":"Release notes","href":"changelog.html#220---2025-02-11","title":"Release notes > 2.2.0 - 2025-02-11","text":"2.2.0 - 2025-02-11"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nfeat: Support NaN and Inf values #13\n\nfeat: Support relative tolerances #15"},{"objectID":"Release notes","href":"changelog.html#documentation","title":"Release notes > Documentation","text":"Documentation\n\nchore: update CHANGELOG for v2.1.0 #11"},{"objectID":"Release notes","href":"changelog.html#210---2025-01-22","title":"Release notes > 2.1.0 - 2025-01-22","text":"2.1.0 - 2025-01-22"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nfix: tox env variable for test coverage #7\n\nfix: trusted publisher permissions #10"},{"objectID":"Release notes","href":"changelog.html#documentation","title":"Release notes > Documentation","text":"Documentation\n\nchore: update CHANGELOG for v2.0.0 #5\n\nfeat: Technical review #6\n\ndocs: review of user documentation #8"},{"objectID":"Release notes","href":"changelog.html#maintenance","title":"Release notes > Maintenance","text":"Maintenance\n\nci: Remove the dependencies to pr-name #9"},{"objectID":"Release notes","href":"changelog.html#200---2024-10-10","title":"Release notes > 2.0.0 - 2024-10-10","text":"2.0.0 - 2024-10-10"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nfeat: Migrate the original repository to GitHub #1\n\nfeat: Add sensors and projections #3"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nfix: Add support for SCADE 2024 R2 #4"},{"objectID":"Release notes","href":"changelog.html#test","title":"Release notes > Test","text":"Test\n\nrefactor: Simplify the tests and add a new one for main #2"},{"objectID":"Home","href":"user-guide/example.html#example","title":"Example","text":"Example\n\nThis section shows the result of the harness generation for a simple\nSCADE Test SSS scenario. This scenario addresses the operator\nCommon::MinMaxU8, defined in the Common.etp SCADE project.\n\nInput scenario\n\nPython script\n\nReminder: common.py and its class MinMax8 are produced by\nAnsys SCADE Python Wrapper."}]